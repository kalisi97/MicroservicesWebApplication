// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingBasket.DbContexts;

namespace ShoppingBasket.Migrations
{
    [DbContext(typeof(ShoppingBasketDbContext))]
    partial class ShoppingBasketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShoppingBasket.Entities.Basket", b =>
                {
                    b.Property<Guid>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("ShoppingBasket.Entities.BasketChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasketChangeType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("InsertedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BasketChanges");
                });

            modelBuilder.Entity("ShoppingBasket.Entities.BasketLine", b =>
                {
                    b.Property<Guid>("BasketLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("WineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketLineId");

                    b.HasIndex("BasketId");

                    b.HasIndex("WineId");

                    b.ToTable("BasketLines");
                });

            modelBuilder.Entity("ShoppingBasket.Entities.Wine", b =>
                {
                    b.Property<Guid>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WineId");

                    b.ToTable("Wines");

                    b.HasData(
                        new
                        {
                            WineId = new Guid("ee272f8b-6096-4cb6-8625-bb4bb2d89e8b"),
                            Name = "Toplički Vinogradi Epigenia Prokupac 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("3448d5a4-0f72-4dd7-bf15-c14a46b26c00"),
                            Name = "Doja Cabernet Sauvignon 50% Merlot 50% 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("b419a7ca-3321-4f38-be8e-4d7b6a529319"),
                            Name = "Kostić Prokupac Barrique 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b"),
                            Name = "Toplički Vinogradi Epigenia Chardonnay 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("1babd057-e980-4cb3-9cd2-7fdd9e525668"),
                            Name = "Spasić Temjanika Dry White 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("adc42c09-08c1-4d2c-9f96-2d15bb1af299"),
                            Name = "Aleksandrović Rodoslov 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("adc42c08-08c1-4d2c-9f96-2d15bb1af299"),
                            Name = "Chardonney Radovanović 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("adc54a08-07c1-4d2c-9f96-2d15bb1af299"),
                            Name = "Varijanta Aleksandrović Muskat Hamburg 0.75l"
                        },
                        new
                        {
                            WineId = new Guid("adc54a08-07c1-4d2c-9f96-2d15bb1af211"),
                            Name = "Rose Radovanović  0.75l"
                        });
                });

            modelBuilder.Entity("ShoppingBasket.Entities.BasketLine", b =>
                {
                    b.HasOne("ShoppingBasket.Entities.Basket", "Basket")
                        .WithMany("BasketLines")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingBasket.Entities.Wine", "Wine")
                        .WithMany()
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
